%YAML: 1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 2  

imu_topic: "/dji_sdk/imu"
image0_topic: "/camera/infra1/image_rect_raw"
image1_topic: "/camera/infra2/image_rect_raw"
output_path: "/home/dji/output/"

cam0_calib: "left.yaml"
cam1_calib: "right.yaml"
image_width: 640
image_height: 480
   

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ -4.9876902235101994e-03, 6.8975396706592029e-03,9.9996377279015758e-01, 0.041,
          -9.9994520639236018e-01, -9.2379465278691342e-03,-4.9238762056141860e-03, 0.017,
          9.2036492313802842e-03, -9.9993353993674983e-01, 6.9432377451592586e-03, 0.048, 
          0., 0., 0., 1. ]
   # data: [ -4.9876902235101994e-03, 6.8975396706592029e-03,9.9996377279015758e-01, 7.5661288872482843e-02,
   #        -9.9994520639236018e-01, -9.2379465278691342e-03,-4.9238762056141860e-03, -1.1023937355649450e-03,
   #        9.2036492313802842e-03, -9.9993353993674983e-01, 6.9432377451592586e-03, 3.7679316555898373e-02, 
   #        0., 0., 0., 1. ]
#         [-0.11749538591821451, -0.9836470214396434, 0.13650410799989743, -0.033738121231926085,
#         0.06052563104228181, -0.1442937810586743, -0.9876821111748078, 0.058838163322641295,
#         0.991227260659665, -0.10778609354044338, 0.07648971018658257, 0.17852912825713296,
#         0.0, 0.0, 0.0, 1.0]
#        [-0.11749539,  0.06052563,  0.99122726, -0.18448823],
#        [-0.98364702, -0.14429378, -0.10778609, -0.00545346],
#        [ 0.13650411, -0.98768211,  0.07648971,  0.04906315],
#        [ 0.        ,  0.        ,  0.        ,  1.        ]]
# [0.004771548580238483, -0.9998433176685972, 0.01704618542661246, 0.021017259062893753,
#        0.088148487070772, -0.0165594738434926, -0.9959696923366494, 0.044000946986968735,
#        0.9960959173449513, 0.00625491322711319, 0.0880556614264007, -0.07141269411066536,
#        0.0, 0.0, 0.0, 1.0]
# [[ 0.00477155,  0.08814849,  0.99609592,  0.06715499],
#        [-0.99984332, -0.01655947,  0.00625491,  0.02218928],
#        [ 0.01704619, -0.99596969,  0.08805566,  0.04975364],
#        [ 0.        ,  0.        ,  0.        ,  1.        ]]

body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ -5.4579099636307138e-03, 9.9270446267020751e-03,9.9993583044303802e-01, 0.041,
          -9.9994301906395133e-01, -9.2282764757631863e-03, -5.3663338096727742e-03, -0.033,
           9.1744124661398141e-03, -9.9990814213019896e-01, 9.9768460765312650e-03, 0.048,
           0., 0., 0., 1. ]
   # data: [ -5.4579099636307138e-03, 9.9270446267020751e-03,9.9993583044303802e-01, 7.6697631756292572e-02,
   #        -9.9994301906395133e-01, -9.2282764757631863e-03, -5.3663338096727742e-03, -5.0567591656427512e-02,
   #         9.1744124661398141e-03, -9.9990814213019896e-01, 9.9768460765312650e-03, 3.7803643514866328e-02,
   #         0., 0., 0., 1. ]
#         [-0.22867027524731381, -0.9652113306786451, -0.12679508014066604, -0.03714914533249538,
#         0.05983931613388449, 0.11606363481919807, -0.9914375870004051, 0.07021155886475766,
#         0.9716630905118027, -0.2342996367946737, 0.03121728263217699, 0.15917943922023156,
#         0.0, 0.0, 0.0, 1.0]
#        [[-0.22867028,  0.05983932,  0.97166309, -0.1673651 ],
#        [-0.96521133,  0.11606363, -0.23429964, -0.0067101 ],
#        [-0.12679508, -0.99143759,  0.03121728,  0.0599309 ],
#        [ 0.        ,  0.        ,  0.        ,  1.        ]])

# [0.007917854099140587, -0.9999600436024301, 0.004149552396652545, -0.024927967973379005,
#        0.08958853482955004, -0.0034236299066241482, -0.9959729781401494, 0.045588121150189634,
#        0.9959473891795494, 0.008257721047014721, 0.08955784739234457, -0.06326110889111343,
#        0.0, 0.0, 0.0, 1.0]
# [[ 0.00791785,  0.08958853,  0.99594739,  0.05911794],
#        [-0.99996004, -0.00342363,  0.00825772, -0.0242485 ],
#        [ 0.00414955, -0.99597298,  0.08955785,  0.05117351],
#        [ 0.        ,  0.        ,  0.        ,  1.        ]]

center_T_imu: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ 1.0, 0.0,0.0, 0.0e-02,
           0.0, 1.0,0.0, 0.0e-02,
           0.0, 0.0, 1.0, 0.0e-02, 
           0.0, 0.0, 0.0, 1.0 ]

#Multiple thread support
multiple_thread: 1

#feature traker paprameters
max_cnt: 110            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 0           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.2          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.05         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.002         # accelerometer bias random work noise standard deviation.  #0.002
gyr_w: 0.0004       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.805         # gravity magnitude

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: -0.018                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#loop closure parameters
load_previous_pose_graph: 1        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/dji/output/pose_graph/" # save and load path
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0
pg_R_vio_buffer_length: 10
pg_t_vio_buffer_length: 5 
